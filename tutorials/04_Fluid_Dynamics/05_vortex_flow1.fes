{"meta":{"app":"FEATool Multiphysics","author":"Precise Simulation","build":"1.9.1","date":"04-Feb-2019","descr":["Time dependent decaying flow for standing vortices with the following analytical solution to the Navier-Stokes equations","","    u = -cos(k*x).*sin(k*y)*exp(-2*nu*k^2*t)","    v = sin(k*x).*cos(k*y)*exp(-2*nu*k^2*t)","    p = -1/4*(cos(2*k*x)+cos(2*k*y))*exp(-4*nu*k^2*t)","","The two-dimensional flow problem is solved for a unit square with _k = 2*pi_ and the exact solution as boundary and initial conditions."],"dim":2,"image":"vortex_flow1.jpg","keyw":["vortex","validation"],"mlver":"R2019a","name":"vortex_flow1","phys":["Navier-Stokes Equations"],"system":"","time":737460,"title":"Vortex Flow","type":"Fluid Dynamics","user":"precsim","ver":[1,9,1]},
"fields":["type","id","ui_arg","fcn_type","fcn_oarg"],
"data":[
["uipushtool","Standard.NewFigure",[],"ClickedCallback",[]],
["uicontrol","radio_2d",0,"Callback",[]],
["uicontrol","popup_physsel",["Navier-Stokes Equations"],"Callback",[]],
["uicontrol","button_dlgnew_ok",[],"Callback",[]],
["uicontrol","button_rectangle",[],"Callback",[0,0.6,0,0.4,"R1"]],
["uicontrol","list_select_gobj",["R1"],"Callback",[]],
["uicontrol","button_edit_gobj",[],"Callback",[]],
["uicontrol","edit_x_min","0","Callback",[]],
["uicontrol","edit_x_max","1","Callback",[]],
["uicontrol","edit_y_min","0","Callback",[]],
["uicontrol","edit_y_max","1","Callback",[]],
["uicontrol","button_dlggobj_ok",[],"Callback",[]],
["uicontrol","button_grid_mode",1,"Callback",[]],
["uicontrol","grid_hmax","0.05"],
["uicontrol","grid_generate",[],"Callback",[]],
["uicontrol","button_equation_mode",1,"Callback",[]],
["uitext",[],["Press the **Constants** _Toolbar_ button, or select the corresponding entry from the _Equation_ menu, to open the _Model Constants and Expressions_ dialog box. Enter the following expressions for the viscosity, vortex period, and reference solutions.","| Name    | Expression                                      |","|---------|-------------------------------------------------|","|  nu     |  0.0.1                                          |","|  k      |  2*pi                                           |","|  u_ref  |  -cos(k*x).*sin(k*y)*exp(-2*nu*k^2*t)           |","|  v_ref  |   sin(k*x).*cos(k*y)*exp(-2*nu*k^2*t)           |","|  p_ref  |  -1/4*(cos(2*k*x)+cos(2*k*y))*exp(-4*nu*k^2*t)  |"]],
["uicontrol*","button_const_expr",[],"Callback",[]],
["uitable*","table_dlgexpr_1_1","nu","CellEditCallback",[]],
["uitable*","table_dlgexpr_1_2","0.01","CellEditCallback",[]],
["uitable*","table_dlgexpr_2_1","k","CellEditCallback",[]],
["uitable*","table_dlgexpr_2_2","2*pi","CellEditCallback",[]],
["uitable*","table_dlgexpr_3_1","u_ref","CellEditCallback",[]],
["uitable*","table_dlgexpr_3_2","-cos(k*x)*sin(k*y)*exp(-2*nu*k^2*t)","CellEditCallback",[]],
["uitable*","table_dlgexpr_4_1","v_ref","CellEditCallback",[]],
["uitable*","table_dlgexpr_4_2","sin(k*x)*cos(k*y)*exp(-2*nu*k^2*t)","CellEditCallback",[]],
["uitable*","table_dlgexpr_5_1","p_ref","CellEditCallback",[]],
["uitable*","table_dlgexpr_5_2","-1/4*(cos(2*k*x)+cos(2*k*y))*exp(-4*nu*k^2*t)","CellEditCallback",[]],
["uicontrol*","button_dlgexpr_ok",[],"Callback",[]],
["uitext*",[],"Open the _Equation Settings_ dialog box and enter `nu` for the _viscosity_ and the reference expressions as _initial conditions_"],
["uimenu","Equation Settings...",[],"Callback",[]],
["uicontrol","miu_ns","nu","Callback",[]],
["uicontrol","eqn_init1_ns","u_ref","Callback",[]],
["uicontrol","eqn_init2_ns","v_ref","Callback",[]],
["uicontrol","eqn_init3_ns","p_ref","Callback",[]],
["uicontrol","button_dlgeqn_ok",[],"Callback",[]],
["uicontrol","button_boundary_mode",1,"Callback",[]],
["uitext*",[],"Prescribe the reference velocities on all boundaries using the _Inlet/velocity_ boundary condition."],
["uicontrol","list_seldom",["1","2","3","4"],"Callback",[]],
["uicontrol","popup_selbc_ns",["Inlet/velocity"],"Callback",[]],
["uicontrol","edit_bccoef1_ns","u_ref","Callback",[]],
["uicontrol","edit_bccoef2_ns","v_ref","Callback",[]],
["uicontrol","button_dlgbdr_ok",[],"Callback",[]],
["uitext*",[],"Also prescribe the reference pressure on all four points. Note that since no outflow is present in this model, a reference point with pressure _p = 0_ has already been prescribed. This is necessary to ensure convergence and a unique pressure for stationary problems without any outflow boundary conditions."],
["uitext",[],"Select **Add Point Constraints...** from the _Boundary_ menu, or select the **Point constraints** button in the **Tools** _toolbar_."],
["uimenu*","Point Constraints...",[],"Callback",[]],
["uitext",[],"In the _Point Constraint Settings_ dialog box, select all corner points (_1-4_) in the list box, and enter `p_ref` into the corresponding edit field for the pressure constraint expression. Press **OK** to finish and close the dialog box."],
["uicontrol*","list_seldom",["1","2","3","4"],"Callback",[]],
["uicontrol*","edit_pnt_p","p_ref","Callback",[]],
["uicontrol*","button_dlgpnt_ok",[],"Callback",[]],
["uicontrol","button_solve_mode",1,"Callback",[]],
["uicontrol","button_solver_settings",[],"Callback",[]],
["uicontrol","solver",[" Time-Dependent"],"Callback",[]],
["uicontrol","tstep","0.01","Callback",[]],
["uicontrol","tmax","0.1","Callback",[]],
["uicontrol","button_dlgsolversettings_solve",[],"Callback",[]],
["uitext*",[],"Plot the velocity field as arrows and pressure as contour plot to see the vortices of the flow field."],
["uicontrol","button_post_settings",[],"Callback",[]],
["uicontrol","ffiso",1,"Callback",[]],
["uicontrol","post_iso",["Pressure"],"Callback",[]],
["uicontrol","ffarrow",1,"Callback",[]],
["uicontrol","button_dlgpost_ok",[],"Callback",[]],
["imgcap"],
["uitext*",[],"By plotting and visualizing the difference between the computed and reference variables, the overall accuracy of the simulation can be estimated."],
["uicontrol","button_post_settings",[],"Callback",[]],
["uicontrol","ssurfexpr","u-u_ref","Callback",[]],
["uicontrol","button_dlgpost_ok",[],"Callback",[]],
["uivalidate",[],"pass=0;try,for i_sol=1:length(fea.sol.t),t=fea.sol.t(i_sol);u_i=evalexprp('u',fea,i_sol);v_i=evalexprp('v',fea,i_sol);p_i=evalexprp('p',fea,i_sol);u_r=evalexprp('u_ref',fea,i_sol);v_r=evalexprp('v_ref',fea,i_sol);p_r=evalexprp('p_ref',fea,i_sol);err(i_sol,1)=norm(u_i - u_r)/norm(u_r);err(i_sol,2)=norm(v_i - v_r)/norm(v_r);err(i_sol,3)=norm(p_i - p_r)/norm(p_r);end,pass=all(err(:,1)<0.1&err(:,2)<0.1&err(:,3)<0.46);catch,end"]
]}
