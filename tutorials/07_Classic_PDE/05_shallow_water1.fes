{"meta":{"app":"FEATool Multiphysics","author":"Precise Simulation","build":"1.9.1","date":"23-Feb-2019","descr":["Saint-Venant shallow water equations is a simplified model of fluid flow with a free surface. The non-conservative form of the equations read","","    h' + (u*hx + v*hy) + (h+H)*(ux+vy) = 0","    u' + (u*ux + v*uy) = -g*hx","    v' + (u*vx + v*vy) = -g*hy","","where _h_ is the unknown free surface height relative to the mean level _H_."],"dim":2,"image":"shallow_water1.jpg","keyw":["custom","pde","shallow_water"],"mlver":"R2019a","name":"shallow_water1","phys":["Custom Equation","Convection and Diffusion"],"system":"","time":737480,"title":"Shallow Water Equations","type":"Fluid Dynamics","user":"precsim","ver":[1,9,1]},
"fields":["type","id","ui_arg","fcn_type","fcn_oarg"],
"data":[
["introdlg","05_shallow_water1.fes",""],
["overlay",["Shallow Water Equations",""],""],
["overlay",["","This example models a moving wave in a pool of shallow water. Although these types of fluid flows are really governed by the full three-dimensional Navier-Stokes equations, they can be simplified with a two dimensional approximation, the Saint-Venant shallow water equations, where the z-dimension is replaced with a variable for the unknown free surface height relative to a mean level."],""],
["msgbox","The tutorial can also be run by selecting <tts>,</tts> **Model Examples and Tutorials...** <txt>></txt><tts>,</tts> **Classic PDE** <txt>></txt><tts>,</tts> **Shallow Water Equations** <tts>,</tts> from the **File** menu, and followed along with the step-by-step instructions in the _<txt>User's</txt><tts>users</tts> Guide_.",""],
["pause","","2"],
["introdlg","close",""],
["uipushtool","Standard.NewFigure",{},"ClickedCallback",{}],
["uitext*",[],"This example uses three coupled physics modes, a _Custom Equation_ mode for the surface height, and two _Convection and Diffusion_ physics modes for the horizontal velocities."],
["uicontrol","popup_physsel",["Custom Equation"],"Callback",{}],
["uicontrol","edit_depvar","h","Callback",{}],
["uitext",[],"The other physics modes will be added later, so press **OK** to finish the initial physics mode selection."],
["uicontrol*","button_dlgnew_ok",{},"Callback",{}],
["overlay",["Geometry Mode",""],1],
["uitext",[],"The domain here consists of a _5_ by _1_ rectangle. To create it, first select **Rectangle** from the _Geometry_ menu."],
["uimenu*",["Geometry","Create Object...","Rectangle"],{},"Callback",{}],
["uitext",[],"Enter the coordinate limits so that it spans between `0` and `5` in the x-direction, and `0` and `1` in the y-direction."],
["uicontrol*","edit_x_min","0","Callback",{}],
["uicontrol*","edit_x_max","5","Callback",{}],
["uicontrol*","edit_y_min","0","Callback",{}],
["uicontrol*","edit_y_max","1","Callback",{}],
["uicontrol","button_dlggobj_ok",{},"Callback",{}],
["uicontrol","button_grid_mode",1,"Callback",{}],
["uicontrol","grid_hmax","0.2"],
["uicontrol","grid_generate",{},"Callback",{}],
["uicontrol","button_equation_mode",1,"Callback",{}],
["uicontrol","button_eqnedit_ce",{},"Callback",{}],
["uitext",[],"Enter the equation for the surface height, <txt>`h' + (u*hx_t + v*hy_t) + (h+H)*(ux_t+vy_t) = 0`,</txt> into the edit field for the _h equation_."],
["uicontrol*","edit_eqn1","h' + (u*hx_t + v*hy_t) + (h+H)*(ux_t+vy_t) = 0","Callback",{}],
["uicontrol","button_dlgediteqn_ok",{},"Callback",{}],
["uitext",[],"An initial small disturbance, or height difference, is required to see any wave phenomena. <txt>Enter `0.2*exp(-((x-4)^2))` into the edit field for the _Initial condition for h_.</txt>"],
["uicontrol*","eqn_init1_ce","0.2*exp(-((x-4)^2))","Callback",{}],
["uitext*",[],"Now add two _Convection and Diffusion_ physics modes for the horizontal velocity components<tts>,</tts> _u_ and _v_. Although the _Custom Equation_ physics mode could also be used here, the _Convection and Diffusion_ physics modes feature pre-defined equations, and convective stabilization which is necessary here."],
["uicontrol","tab_+",0,"Callback",[]],
["uicontrol","popup_physsel",["Convection and Diffusion"],"Callback",[]],
["uicontrol","edit_depvar","u","Callback",[]],
["uicontrol","button_addphys",[],"Callback",[]],
["uicontrol","d_cd","0","Callback",[]],
["uicontrol","u_cd","u","Callback",[]],
["uicontrol","v_cd","v","Callback",[]],
["uitext",[],"Enter the x-component of the source term for gravitational effects <txt>`-g*hx`</txt><tts>, minus g times h x,</tts> into the edit field for the _Reaction rate_."],
["uicontrol*","r_cd","-g*hx","Callback",[]],
["uicontrol","button_artstab_cd",[],"Callback",[]],
["uicontrol","check_artstab_upw",1,"Callback",[]],
["uicontrol","popup_artstab_upw",["High order"],"Callback",[]],
["uicontrol","button_dlgartstab_ok",[],"Callback",[]],
["uicontrol","tab_+",0,"Callback",[]],
["uicontrol","popup_physsel",["Convection and Diffusion"],"Callback",[]],
["uicontrol","edit_depvar","v","Callback",[]],
["uicontrol","button_addphys",[],"Callback",[]],
["uicontrol","d_cd2","0","Callback",[]],
["uicontrol","u_cd2","u","Callback",[]],
["uicontrol","v_cd2","v","Callback",[]],
["uitext",[],"Enter the y-component of the source term for gravitational effects <txt>`-g*hy`</txt><tts>, minus g times h y,</tts> into the edit field for the _Reaction rate_."],
["uicontrol*","r_cd2","-g*hy","Callback",[]],
["uicontrol","button_artstab_cd2",[],"Callback",[]],
["uicontrol","check_artstab_upw",1,"Callback",[]],
["uicontrol","popup_artstab_upw",["High order"],"Callback",[]],
["uicontrol","button_dlgartstab_ok",[],"Callback",[]],
["uicontrol","button_dlgeqn_ok",{},"Callback",{}],
["uitext*",[],"Two constants also have to be defined, one for the mean fluid level _H = 1_, and one for the gravitational constant _g = 9.8_."],
["uicontrol*","button_const_expr",{},"Callback",{}],
["uitable*","table_dlgexpr_1_1","H","CellEditCallback",{}],
["uitable*","table_dlgexpr_1_2","1","CellEditCallback",{}],
["uitable*","table_dlgexpr_2_1","g","CellEditCallback",{}],
["uitable*","table_dlgexpr_2_2","9.8","CellEditCallback",{}],
["uicontrol*","button_dlgexpr_ok",{},"Callback",{}],
["uicontrol","button_boundary_mode",1,"Callback",{}],
["uitext*",[],"The dependent variable for the height, _h_, should not be constrained and should therefore be prescribed with homogeneous Neumann conditions everywhere."],
["uitext",[],"Select all boundaries <txt>(**1-4**)</txt> in the _Boundaries_ list box"],
["uicontrol*","list_seldom",["1","2","3","4"],"Callback",[]],
["uicontrol","radio_bccoef12_ce",1,"Callback",[]],
["uitext*",[],"The right boundary is assumed to be a wall, and zero velocities are therefore prescribed there. The top and bottom boundaries are assumed to be symmetric, and feature zero flow in the normal direction."],
["uicontrol","tab_cd",0,"Callback",[]],
["%uicontrol","list_seldom",["1","3"],"Callback",[]],
["%uicontrol","popup_selbc_cd",["Insulation/symmetry"],"Callback",[]],
["%uicontrol","list_seldom",["2"],"Callback",[]],
["%uicontrol","popup_selbc_cd",["Convective flux/outflow"],"Callback",[]],
["uicontrol","list_seldom",["4"],"Callback",[]],
["uicontrol","popup_selbc_cd",["Concentration"],"Callback",[]],
["uicontrol","tab_cd2",0,"Callback",[]],
["%uicontrol","list_seldom",["2"],"Callback",[]],
["%uicontrol","popup_selbc_cd2",["Convective flux/outflow"],"Callback",[]],
["uicontrol","list_seldom",["1","3","4"],"Callback",[]],
["uicontrol","popup_selbc_cd2",["Concentration"],"Callback",[]],
["uicontrol","button_dlgbdr_ok",{},"Callback",{}],
["uicontrol","button_solve_mode",1,"Callback",{}],
["uicontrol","button_solver_settings",{},"Callback",{}],
["uitext*",[],"Select the **Time-Dependent** solver with the following parameters."],
["uicontrol*","solver",[" Time-Dependent"],"Callback",{}],
["uicontrol","tolchg","0.001","Callback",[]],
["uicontrol","tstep","0.01","Callback",{}],
["uicontrol","tmax","1.5","Callback",{}],
["uicontrol","button_dlgsolversettings_solve",{},"Callback",{}],
["overlay",["Postprocessing Mode",""],1],
["uitext*",[],"Once the solver has finished, turn on the height plot for _h_<tts>,</tts> and visualize the free surface for different times."],
["uicontrol","button_post_settings",{},"Callback",{}],
["uicontrol","ffsurfh",1,"Callback",{}],
["uicontrol","button_dlgpost_ok",{},"Callback",{}],
["imgcap"],
["uitext*",[],"One can also use the _Animate/Playback Solution..._ option in the _Post_ menu, to create an animation or video of the solution."],
["overlay",["","<speak>The tutorial is now complete, and the model can be saved as a binary file <txt>(_.fea_)</txt>, <break time=\"0.3s\"/>exported as a MATLAB _m_-script file, <break time=\"0.3s\"/>or a GUI playback file <txt>(_.fes_)</txt>.</speak>"],""]
]}
