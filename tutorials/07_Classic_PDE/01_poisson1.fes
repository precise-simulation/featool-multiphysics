{"meta":{"app":"FEATool Multiphysics","author":"Precise Simulation","build":"1.9.1","date":"01-Feb-2019","descr":["The classic Poisson equation is one of the most fundamental partial differential equations (PDEs). Although one of the simplest equations, it is a very good model for the process of diffusion and comes up in many applications (for example fluid flow, heat transfer, and chemical transport). It is therefore fundamental to many simulation codes to be able to solve it efficiently and accurately.","","This example shows how to set up and solve the Poisson equation for a scalar field _u = u(x)_ on a unit line. Both the diffusion coefficient _D_ and right hand side source term _f_ are assumed to be constant and equal to 1. The Poisson problem is also considered stationary meaning that the time dependent term can be neglected. Homogeneous Dirichlet boundary conditions, _u = 0_ are prescribed on all boundaries of the domain. The exact solution for this problem is _u(x) = (-x^2+x)/2_ which can be used to measure the accuracy of the computed solution."],"dim":1,"image":"poisson1.jpg","keyw":["pde","poisson_equation","validation"],"mlver":"R2019a","name":"poisson1","phys":["Poisson Equation"],"system":"","time":737457,"title":"Poisson Equation","type":"Classic PDE","user":"precsim","ver":[1,9,1]},
"fields":["type","id","ui_arg","fcn_type","fcn_oarg"],
"data":[
["introdlg","01_poisson1.fes",""],
["overlay",["Poisson Equation",""],""],
["overlay",["","The classic Poisson equation is one of the most fundamental partial differential equations <txt>(PDEs)</txt>. Although one of the simplest equations, it is a very good model for the process of diffusion, and comes up in many applications <txt>(for example fluid flows, heat transfer, and chemical transport problems)</txt>. It is therefore fundamental to many simulation codes to be able to solve it efficiently and accurately."],""],
["overlay",["","This example shows how to set up and solve the Poisson equation for a scalar field <txt>_u = u(x)_</txt> on a unit line. Both the diffusion coefficient <tts>,</tts>_D_<tts>,</tts> and source term <tts>,</tts>_f_<tts>,</tts> are assumed to be constant and equal to 1. Homogeneous Dirichlet boundary conditions, <txt>_u = 0,_</txt> are prescribed on all boundaries of the domain. One can derive an exact analytical solution <txt>_u(x) = (-x<sup>2</sup>+x)/2_</txt>, which is used to measure the accuracy of the computed solution."],""],
["msgbox","The tutorial can also be run by selecting <tts>,</tts> **Model Examples and Tutorials...** <txt>></txt><tts>,</tts> **Classic PDE** <txt>></txt><tts>,</tts> **Poisson Equation** <tts>,</tts> from the **File** menu, and followed along with the step-by-step instructions in the _<txt>User's</txt><tts>users</tts> Guide_.",""],
["pause","","2"],
["introdlg","close",""],
["uipushtool","Standard.NewFigure",[],"ClickedCallback",[]],
["uicontrol","radio_1d",1,"Callback",[]],
["uicontrol","popup_physsel",["Poisson Equation"],"Callback",[]],
["imgcap"],
["uicontrol","button_dlgnew_ok",[],"Callback",[]],
["overlay",["Geometry Mode",""],1],
["uicontrol","button_line",[],"Callback",[]],
["uicontrol","edit_linegeom_xmin","0","Callback",[]],
["uicontrol","edit_linegeom_xmax","1","Callback",[]],
["imgcap"],
["uicontrol","button_linegeom_ok",[],"Callback",[]],
["imgcap"],
["uicontrol","button_grid_mode",1,"Callback",[]],
["uicontrol","grid_hmax","0.01"],
["uicontrol","grid_generate",[],"Callback",[]],
["imgcap"],
["uicontrol","button_equation_mode",1,"Callback",[]],
["uicontrol","d_poi","1","Callback",[]],
["uicontrol","f_poi","1","Callback",[]],
["imgcap"],
["uicontrol","button_dlgeqn_ok",[],"Callback",[]],
["uicontrol","button_boundary_mode",1,"Callback",[]],
["uicontrol","list_seldom",["1","2"],"Callback",[]],
["uicontrol","popup_selbc_poi",["Dirichlet boundary condition"],"Callback",[]],
["uicontrol","edit_bccoef1_poi","0","Callback",[]],
["imgcap"],
["uicontrol","button_dlgbdr_ok",[],"Callback",[]],
["uicontrol","button_solve_mode",1,"Callback",[]],
["uicontrol","button_solve",[],"Callback",[]],
["imgcap"],
["overlay",["Postprocessing Mode",""],1],
["uitext*",[],"To visualize the error, plot the difference between the computed solution and the exact analytical solution <txt>_u - (-x^2+x)/2_</txt>."],
["uicontrol","button_post_settings",[],"Callback",[]],
["uicontrol","ssurfexpr","u - (-x^2+x)/2","Callback",[]],
["imgcap"],
["uicontrol","button_dlgpost_ok",[],"Callback",[]],
["uitext*",[],"Similar to this example, the Poisson equation solved for the unit circle and sphere, also allow for exact analytical solutions, and can similarly be used as PDE validation test cases."],
["imgcap"],
["overlay",["","<speak>The tutorial is now complete, and the model can be saved as a binary file <txt>(_.fea_)</txt>, <break time=\"0.3s\"/>exported as a MATLAB _m_-script file, <break time=\"0.3s\"/>or a GUI playback file <txt>(_.fes_)</txt>.</speak>"],""],
["uivalidate*",[],"pass=0;try,u=evalexpr0('u',[.5;.5],1,1:size(fea.grid.c,2),[],fea);uref=evalexpr0('(-x^2+x)/2',[.5;.5],1,1:size(fea.grid.c,2),[],fea);pass=norm(abs(u-uref)./abs(uref))<0.01;catch,end"]
]}
