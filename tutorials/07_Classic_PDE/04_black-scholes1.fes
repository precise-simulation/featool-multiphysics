{"meta":{"app":"FEATool Multiphysics","author":"Precise Simulation","build":"1.9.1","date":"05-Feb-2019","descr":["This example shows how to define a custom equation model in FEATool. In this case the Black-Scholes model equation, which is used in financial analytics to model derivatives and options pricing. The non-linear partial differential equation to be solved reads","","    du/dt - d/dx(1/2*du/dx) - du/dx = -u + ( (x-t)^5 - 10(x-t)^4 - 10(x-t)^3)","","with boundary conditions _u(0,t) = -t^5_ and _u(x,t) = (x-t)^5_ on the left and right sides of the domain, respectively. The problem is time-dependent with initial condition is _u(x,t=0) = x^5_. For this problem an exact analytical solution exists, _u(x,t) = (x-t)^5_, which can be used to verify the computed solution."],"dim":1,"image":"black-scholes1.jpg","keyw":["custom","pde","black-scholes","validation"],"mlver":"R2019a","name":"black-scholes1","phys":["Custom Equation"],"system":"","time":737461,"title":"Black-Scholes Equation","type":"Classic PDE","user":"precsim","ver":[1,9,1]},
"fields":["type","id","ui_arg","fcn_type","fcn_oarg"],
"data":[
["introdlg","04_black-scholes1.fes",""],
["overlay",["Black-Scholes Equation",""],""],
["overlay",["","This example shows how to define a custom equation, the nonlinear Black-Scholes model equation, which is used in financial analytics to model how to reduce or eliminate risk in derivatives and options pricing. For the chosen test problem an exact analytical solution exists, which is also used to verify the computed solution."],""],
["msgbox","The tutorial can also be run by selecting <tts>,</tts> **Model Examples and Tutorials...** <txt>></txt><tts>,</tts> **Classic PDE** <txt>></txt><tts>,</tts> **Black-Scholes Equation** <tts>,</tts> from the **File** menu, and followed along with the step-by-step instructions in the _<txt>User's</txt><tts>users</tts> Guide_.",""],
["pause","","2"],
["introdlg","close",""],
["uipushtool","Standard.NewFigure",[],"ClickedCallback",[]],
["uicontrol","radio_1d",1,"Callback",[]],
["uicontrol","popup_physsel",["Custom Equation"],"Callback",[]],
["imgcap"],
["uicontrol","button_dlgnew_ok",[],"Callback",[]],
["overlay",["Geometry Mode",""],1],
["uicontrol","button_line",[],"Callback",[]],
["uicontrol","button_linegeom_ok",[],"Callback",[]],
["imgcap"],
["uicontrol","button_grid_mode",1,"Callback",[]],
["uicontrol","grid_generate",[],"Callback",[]],
["imgcap"],
["uicontrol","button_equation_mode",1,"Callback",[]],
["uicontrol","button_eqnedit_ce",[],"Callback",[]],
["uicontrol","edit_eqn1","u' - 1/2*ux_x - ux_t + u_t = (x-t)^5 - 10*(x-t)^4 - 10*(x-t)^3","Callback",[]],
["imgcap"],
["uicontrol","button_dlgediteqn_ok",[],"Callback",[]],
["uicontrol","eqn_init1_ce","x^5","Callback",[]],
["imgcap"],
["uicontrol","button_dlgeqn_ok",[],"Callback",[]],
["uicontrol","button_boundary_mode",1,"Callback",[]],
["uitext",[],"The values at the two boundaries should be set to <txt>`-t^5`</txt><tts>minus t to the power of 5,</tts> at the left boundary, and <txt>`(1-t)^5`</txt><tts>one minus t to the power of 5</tts> to the right, where `t` represents time."],
["uicontrol*","edit_bccoef13_ce","-t^5","Callback",[]],
["imgcap"],
["uicontrol*","list_seldom",["2"],"Callback",[]],
["uicontrol*","edit_bccoef13_ce","(1-t)^5","Callback",[]],
["imgcap"],
["uicontrol","button_dlgbdr_ok",[],"Callback",[]],
["uicontrol","button_solve_mode",1,"Callback",[]],
["uicontrol","button_solver_settings",[],"Callback",[]],
["uicontrol","solver",[" Time-Dependent"],"Callback",[]],
["imgcap"],
["uicontrol","button_dlgsolversettings_solve",[],"Callback",[]],
["imgcap"],
["overlay",["Postprocessing Mode",""],1],
["uitext",[],"To visualize the difference between the computed and exact analytical solution, open the **Plot Options** and postprocessing settings dialog box, and enter the expression <txt>`u - (x-t)^5`</txt><tts>u minus x minus t to the power of 5,</tts> in the field for the _Surface Plot_ expression."],
["uicontrol*","button_post_settings",[],"Callback",[]],
["uicontrol*","ssurfexpr","u - (x-t)^5","Callback",[]],
["imgcap"],
["uicontrol*","button_dlgpost_ok",[],"Callback",[]],
["uitext",[],"The magnitude of the error is too small to see clearly<tts>,</tts> with the default axis scaling. Zoom in manually by selecting **Axis/Grid Settings...** in the _Options_ menu."],
["uimenu*","Axis/Grid Settings...",[],"Callback",[]],
["uicontrol*","opt_dlgax_faxeq",1,"Callback",[]],
["uicontrol*","opt_dlgax_fbbox",0,"Callback",[]],
["uicontrol","opt_dlgax_faxis",1,"Callback",[]],
["uitext",[],"Enter <txt>`0 1 -5e-3 5e-3`</txt><tts>zero, 1, minus 5 e minus 3, 5 e minus 3</tts> into the edit field for the _Axis limits_ <txt>(for the _xmin_, _xmax_, _ymin_, and _ymax_ limits)</txt>."],
["uicontrol*","opt_dlgax_axis","0 1 -5e-3 5e-3","Callback",[]],
["imgcap"],
["uicontrol","button_dlgax_ok",[],"Callback",[]],
["uitext*",[],"One can now see that the maximum error has a magnitude of _0.002_<tts>,</tts> around <txt>_x = 0.25_</txt><tts>x equals to 0.25</tts>, which can be improved further by using a finer grid and smaller time steps."],
["imgcap"],
["overlay",["","<speak>The tutorial is now complete, and the model can be saved as a binary file <txt>(_.fea_)</txt>, <break time=\"0.3s\"/>exported as a MATLAB _m_-script file, <break time=\"0.3s\"/>or a GUI playback file <txt>(_.fes_)</txt>.</speak>"],""],
["uivalidate*",[],"pass=0;try,p=0.5*(fea.grid.p(:,1:end-1)+fea.grid.p(:,2:end));u=evalexpr('u',p,fea);uref=evalexpr(['(x-',num2str(fea.sol.t(end)),')^5'],p,fea);err=norm(u-uref)/norm(uref);pass=err<0.02;catch,end"]
]}
